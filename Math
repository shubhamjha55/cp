
// BINARY EXPONENTIATION LOG N 


//3^13 == 3^1011 == 3^8 3^4 3^1
long long binpow(long long a, long long b) {
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a;
        a = a * a;
        b >>= 1;
    }
    return res;
}

long long binpow(long long a, long long b, long long m) {
    a %= m;
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a % m;
        a = a * a % m;
        b >>= 1;
    }
    return res;
}
INVERSE OF a
binpow(a, m - 2, m);

//PRIME NUMBERS

const int N = 1e3 + 5;
bool prime[N];
int lp[N];
int gp[N];
void solve(){
    memset(prime, true, sizeof(prime));
    prime[0] = prime[1] = false;
    for(int i = 2; i <= N; i++){ // i * i for nly prime
        if(prime[i]){
            lp[i] = gp[i] = i;
            for(int p = 2 * i; p <= N; p += i){ // i * i for only prime
                prime[p] = false;
                gp[p] = i;
                if(lp[p] == 0) lp[p] = i;
            }
        }
    }
    for(int i = 2; i < N; i++){
        // if use i * i <= n & p = i * i then primes lp and gp not calculated but prime does why
        // if(prime[i]){
        //     cout << i << " " << lp[i] << " " << gp[i] << nline;
        // }
        // cout << i << " " << lp[i] << " " << gp[i] << nline;
    }
}
//PRIME ONLY
memset(prime, true, sizeof(prime));
    prime[0] = prime[1] = false;
    for(int i = 2; i * i <= N; i++){
        if(prime[i]){
            for(int p = i * i; p <= N; p += i){
                prime[p] = false;
            }
        }
    }

// Greatest PRIME FACTOR same asabove
    memset(greatestPF, 0, sizeof(greatestPF));
        greatestPF[1] = 2;
        for(int i = 2; i <= N; i++){
            if(greatestPF[i] == 0){
                for(int j = i; j <= N; j += i){
                    greatestPF[j] = i;
                }
            }
        } 
    
    
    
// PRIME FACTORS
    for(int i = 3; i <= N; i++){
        int t = i;
        while(t > 1){
            int g = greatestPF[t];
            PF[i].push_back(g);
            while(t % g == 0){
                t /= g;
            }
        }
    }
    
    
    
    
// DIVISOR OF ALL NUMBER TILL N
    int N = 20;
    vector<int> divisors[N];
    for(int i = 2; i <= N; i++){
        for(int j = i; j < N; j += i){
            divisors[j].push_back(i);
        }
    }
    for(int i = 0; i < N; i++){
        cout << i << " : ";
        for(int div : divisors[i]){
            cout << div << " ";
        }cout << nline;
    }
}
