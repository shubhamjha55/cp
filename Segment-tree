//ALL UPDATES
#include<bits/stdc++.h>
using namespace std;
 
#define int long long
#define nline "\n"
#define ar array
 
int dx[] = {-1, 1, 0, 0};
int dy[] = {0, 0, -1, 1};
 
const int N = 2e5, M = 1e9 + 7;
int a[N];
struct Node{
    int s, mn, mx, xr, lz;
}st[1 << 19];
 
int l, r, mid, cand, p, u, v, wt;
int n, m, q, sm, x, y, k, res;
 
void apply(int i, int x, int l2, int r2){
    // st[i].s += x * (r2 - l2 + 1);
    // st[i].mn += x * (r2 - l2 + 1);
    st[i].mx += x * (r2 - l2 + 1);
    // st[i].xr += x * (r2 - l2 + 1);
    st[i].lz += x;
}
void push(int i, int l2, int m2, int r2){
    apply(2 * i, st[i].lz, l2, m2);
    apply(2 * i + 1, st[i].lz, m2 + 1, r2);
    st[i].lz = 0;
}
void upd(int l1, int x, int i = 1, int l2 = 0, int r2 = n - 1){
    if(l2 == r2){
        // st[i].s = x;
        // st[i].mn = x;
        st[i].mx = x;
        // st[i].xr = x;
        // st[i].lz += x;
        return;
    }
    int m2 = (l2 + r2) / 2;
    push(i, l2, m2, r2);
    if(l1 <= m2)
        upd(l1, x, 2 * i, l2, m2);
    else
        upd(l1, x, 2 * i + 1, m2 + 1, r2);
    // st[i].s = st[2 * i].s + st[2 * i + 1].s;
    // st[i].mn = min(st[2 * i].mn, st[2 * i + 1].mn);
    st[i].mx = max(st[2 * i].mx, st[2 * i + 1].mx);
    // st[i].xr = st[2 * i].xr ^ st[2 * i + 1].xr;
}
void upd2(int l1, int r1, int x, int i = 1, int l2 = 0, int r2 = n - 1){
    if(l1 <= l2 && r2 <= r1){
        apply(i, x, l2, r2);
        return;
    }
    int m2 = (l2 + r2) / 2;
    push(i, l2, m2, r2);
    if(l1 <= m2)
        upd2(l1, r1, x, 2 * i, l2, m2);
    if(m2 < r1)
        upd2(l1, r1, x, 2 * i + 1, m2 + 1, r2);
    // st[i].s = st[2 * i].s + st[2 * i + 1].s;
    // st[i].mn = min(st[2 * i].mn, st[2 * i + 1].mn);
    st[i].mx = max(st[2 * i].mx, st[2 * i + 1].mx);
    // st[i].xr = st[2 * i].xr ^ st[2 * i + 1].xr;
}
 
int qry(int l1, int r1, int i = 1, int l2 = 0, int r2 = n - 1){
   if(l1 <= l2 && r2 <= r1){
        // return st[i].s;
        // return st[i].mn;
        return st[i].mx;
        // return st[i].xr;
    }
    int m2 = (l2 + r2) / 2;
    push(i, l2, m2, r2);
    // return (l1 <= m2 ? qry(l1, r1, 2 * i, l2, m2) : 0) + 
    //     (m2 < r1 ? qry(l1, r1, 2 * i + 1, m2 + 1, r2) : 0);
    // return min(l1 <= m2 ? qry(l1, r1, 2 * i, l2, m2) : (int)1e9, 
    //     m2 < r1 ? qry(l1, r1, 2 * i + 1, m2 + 1, r2) : (int)1e9);
    return max(l1 <= m2 ? qry(l1, r1, 2 * i, l2, m2) : -1e9, 
        m2 < r1 ? qry(l1, r1, 2 * i + 1, m2 + 1, r2) : -1e9);
    // return (l1 <= m2 ? qry(l1, r1, 2 * i, l2, m2) : 0) ^ 
    //     (m2 < r1 ? qry(l1, r1, 2 * i + 1, m2 + 1, r2) : 0);
}
 
int qry2(int x, int i = 1, int l2 = 0, int r2 = n - 1){
    if(l2 == r2)
        return l2;
    int m2 = (l2 + r2) / 2;
    push(i, l2, m2, r2);
    if(st[2 * i].mx >= x)
        return qry2(x, 2 * i, l2, m2);
    else
        return qry2(x, 2 * i + 1, m2 + 1, r2);
}
void solve(){
    cin >> n >> q;
    for(int i = 0; i < n; ++i){
        cin >> a[i];
        upd(i, a[i]);
    }
    while(q--){
        cin >> r;
        // int lb = 0, rb = n;
        // while(lb < rb){
        //     int mb = (lb + rb) / 2;
        //     if(qry(0, mb) >= r)
        //         rb = mb;
        //     else
        //         lb = mb + 1;
        // }
        int lb = qry(0, n - 1) >= r ? qry2(r) : n;
        if(lb >= n)
            cout << 0 << " ";
        else{
            cout << lb + 1 << " ";
            upd2(lb, lb, -r);
        }
    }
}
 
signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    int tc = 1;
    //cin>>tc;
    while(tc--) {
        solve();
    }
    return 0;
}
